2022-11-02 03:24:11 info: -----------------------------------------
2022-11-02 03:24:11 info: >>> Running Unit Test `ex3-rollAnAce` <<<
2022-11-02 03:24:11 info: -----------------------------------------
2022-11-02 03:24:26 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollAnAce.test.js --colors
● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
 FAIL  3-UsingAPIs/Week2/unit-tests/ex3-rollAnAce.test.js
  ex3-rollAnAce
    × should have all TODO comments removed (9 ms)
    √ `rollDieUntil` should not contain unneeded console.log calls (2 ms)
    √ should not include a recursive call (1 ms)
    √ should use async/wait (1 ms)
    × should use try/catch (1 ms)
    √ should resolve as soon as a die settles on an ACE (119 ms)
    √ should reject with an Error when a die rolls off the table (103 ms)

  ● ex3-rollAnAce › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      103 | function testTodosRemoved(getSource) {
      104 |   test('should have all TODO comments removed', () => {
    > 105 |     expect(/\bTODO\b/.test(getSource())).toBeFalsy();
          |                                          ^
      106 |   });
      107 | }
      108 |

      at Object.toBeFalsy (test-runner/unit-test-helpers.js:105:42)

  ● ex3-rollAnAce › should use try/catch

    expect(received).toBeDefined()

    Received: undefined

      62 |
      63 |   test('should use try/catch', () => {
    > 64 |     expect(state.tryCatch).toBeDefined();
         |                            ^
      65 |   });
      66 |
      67 |   test('should resolve as soon as a die settles on an ACE', async () => {

      at Object.toBeDefined (3-UsingAPIs/Week2/unit-tests/ex3-rollAnAce.test.js:64:28)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        4.062 s
Ran all test suites matching /ex3-rollAnAce.test.js/i.
2022-11-02 03:29:19 info: -----------------------------------------
2022-11-02 03:29:19 info: >>> Running Unit Test `ex3-rollAnAce` <<<
2022-11-02 03:29:19 info: -----------------------------------------
2022-11-02 03:29:52 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollAnAce.test.js --colors
● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
 FAIL  3-UsingAPIs/Week2/unit-tests/ex3-rollAnAce.test.js
  ex3-rollAnAce
    × should have all TODO comments removed (9 ms)
    √ `rollDieUntil` should not contain unneeded console.log calls (2 ms)
    √ should not include a recursive call (1 ms)
    √ should use async/wait (2 ms)
    √ should use try/catch (1 ms)
    √ should resolve as soon as a die settles on an ACE (131 ms)
    √ should reject with an Error when a die rolls off the table (92 ms)

  ● ex3-rollAnAce › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      103 | function testTodosRemoved(getSource) {
      104 |   test('should have all TODO comments removed', () => {
    > 105 |     expect(/\bTODO\b/.test(getSource())).toBeFalsy();
          |                                          ^
      106 |   });
      107 | }
      108 |

      at Object.toBeFalsy (test-runner/unit-test-helpers.js:105:42)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 6 passed, 7 total
Snapshots:   0 total
Time:        4.203 s
Ran all test suites matching /ex3-rollAnAce.test.js/i.
2022-11-02 03:30:56 info: Disclaimer turned off
2022-11-02 03:31:14 info: -----------------------------------------
2022-11-02 03:31:14 info: >>> Running Unit Test `ex3-rollAnAce` <<<
2022-11-02 03:31:14 info: -----------------------------------------
2022-11-02 03:31:24 info: All unit tests passed.
2022-11-02 03:31:38 info: All steps were completed successfully
2022-11-02 04:49:01 info: ---------------------------------------------
2022-11-02 04:49:01 info: >>> Running Unit Test `ex1-programmerFun` <<<
2022-11-02 04:49:01 info: ---------------------------------------------
2022-11-02 04:49:41 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-programmerFun.test.js --colors
● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
 FAIL  3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js (25.937 s)
  programmerFun
    × HTML should be syntactically valid (1 ms)
    × should have all TODO comments removed
    × should use `fetch()`
    × should use async/wait
    × should use try/catch

  ● programmerFun › HTML should be syntactically valid

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:14:26)

  ● programmerFun › should have all TODO comments removed

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:14:26)

  ● programmerFun › should use `fetch()`

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:14:26)

  ● programmerFun › should use async/wait

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:14:26)

  ● programmerFun › should use try/catch

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:14:26)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 5 total
Snapshots:   0 total
Time:        26.338 s
Ran all test suites matching /ex1-programmerFun.test.js/i.
2022-11-02 05:21:05 info: ----------------------------------------
2022-11-02 05:21:05 info: >>> Running Unit Test `ex4-diceRace` <<<
2022-11-02 05:21:05 info: ----------------------------------------
2022-11-02 05:21:17 info: All unit tests passed.
2022-11-02 05:21:28 info: All steps were completed successfully
2022-11-03 12:21:15 info: ------------------------------------------
2022-11-03 12:21:15 info: >>> Running Unit Test `ex2-pokemonApp` <<<
2022-11-03 12:21:15 info: ------------------------------------------
2022-11-03 12:21:54 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-pokemonApp.test.js --colors
● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
 FAIL  3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js (19.116 s)
  pokemonApp
    × HTML should be syntactically valid
    × should have all TODO comments removed
    × should use `fetch()`
    × should use `await fetch()`
    × should use try/catch

  ● pokemonApp › HTML should be syntactically valid

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

  ● pokemonApp › should have all TODO comments removed

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

  ● pokemonApp › should use `fetch()`

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

  ● pokemonApp › should use `await fetch()`

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

  ● pokemonApp › should use try/catch

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 5 total
Snapshots:   0 total
Time:        20.439 s
Ran all test suites matching /ex2-pokemonApp.test.js/i.
2022-11-07 02:05:38 info: ------------------------------------------
2022-11-07 02:05:38 info: >>> Running Unit Test `ex2-pokemonApp` <<<
2022-11-07 02:05:38 info: ------------------------------------------
2022-11-07 02:06:21 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-pokemonApp.test.js --colors
● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

● Deprecation Warning:

  Option "extraGlobals" was replaced by "sandboxInjectedGlobals".

  Please update your configuration.

  Configuration Documentation:
  https://jestjs.io/docs/configuration

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
 FAIL  3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js (20.371 s)
  pokemonApp
    × HTML should be syntactically valid (1 ms)
    × should have all TODO comments removed
    × should use `fetch()`
    × should use `await fetch()`
    × should use try/catch (1 ms)

  ● pokemonApp › HTML should be syntactically valid

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

  ● pokemonApp › should have all TODO comments removed

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

  ● pokemonApp › should use `fetch()`

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

  ● pokemonApp › should use `await fetch()`

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

  ● pokemonApp › should use try/catch

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\alraz\Desktop\Homework-class40\node_modules\node-fetch\src\index.js:9
    import http from 'node:http';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      33 |   );
      34 |
    > 35 |   window.fetch = require('node-fetch');
         |                  ^
      36 |   await sleep(1000);
      37 |   return window;
      38 | }

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1796:14)
      at require (test-runner/jsdom-helpers.js:35:18)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex2-pokemonApp.test.js:14:26)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 5 total
Snapshots:   0 total
Time:        21.382 s
Ran all test suites matching /ex2-pokemonApp.test.js/i.
